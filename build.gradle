apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'

group = 'org.hibernate.build.gradle'
version = '3.0.0-SNAPSHOT'

defaultTasks 'build'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name 'jboss-nexus'
        url "https://repository.jboss.org/nexus/content/groups/public/"
    }
    maven {
        name "jboss-snapshots"
        url "https://snapshots.jboss.org/maven2/"
    }
}

configurations {
    deployerJars {
        description = 'Jars needed for doing deployment to JBoss Nexus repo'
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'dom4j:dom4j:1.6.1@jar'
    compile 'org.sonatype.plexus:plexus-sec-dispatcher:1.3'
    compile 'org.codehaus.plexus:plexus-container-default:1.0.0'
}

idea {
	project {
		jdkName "1.6"
		languageLevel "1.6"

        vcs = 'Git'
	}
}

ideaModule {
}

jar {
    manifest {
        attributes(
                'Implementation-Url': 'https://hibernate.org',
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Hibernate.org',
                'Implementation-Vendor-Id': 'org.hibernate'
        )
    }
}

task sourceJar(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// This is the kind of malarkey this plugin tries to address ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if ( ! hasProperty( "JBOSS_REPO_USER" ) ) {
    ext.JBOSS_REPO_USER = "";
}
if ( ! hasProperty( "JBOSS_REPO_PASS" ) ) {
    ext.JBOSS_REPO_PASS = "";
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            pom.withXml {
                def Node root = asNode();
                root.appendNode('name', 'Gradle Plugin for Maven Publish Authentication')
                root.appendNode('description', 'Gradle plugin for managing authentication against maven based remote repositories')
                root.appendNode('url', 'https://github.com/sebersole/gradle-maven-publish-auth')

                def org = root.appendNode( 'organization' )
                org.appendNode( 'name', 'Hibernate.org' )
                org.appendNode( 'url', 'https://hibernate.org' )

                def issues = root.appendNode( 'issueManagement' )
                issues.appendNode( 'system', 'github' )
                issues.appendNode( 'url', 'https://github.com/sebersole/gradle-maven-publish-auth/issues' )

                def scm = root.appendNode( 'scm' )
                scm.appendNode( 'url', 'https://github.com/sebersole/gradle-maven-publish-auth' )
                scm.appendNode( 'connection', 'scm:git:https://sebersole@github.com/sebersole/gradle-maven-publish-auth.git' )
                scm.appendNode( 'developerConnection', 'scm:git:git@github.com:sebersole/gradle-maven-publish-auth.git' )

                def license = root.appendNode( 'licenses' ).appendNode( 'license' );
                license.appendNode( 'name', 'GNU Lesser General Public License' )
                license.appendNode( 'url', 'https://www.gnu.org/licenses/lgpl-2.1.html' )
                license.appendNode( 'distribution', 'repo' )

                def dev = root.appendNode( 'developers' ).appendNode( 'developer' );
                dev.appendNode( 'id', 'sebersole' )
                dev.appendNode( 'name', 'Steve Ebersole' )
                dev.appendNode( 'organization', 'Hibernate.org' )
                dev.appendNode( 'organizationUrl', 'https://hibernate.org' )
            }
        }
    }

    repositories {
        maven {
            if ( project.version.endsWith( "SNAPSHOT" ) ) {
                url 'https://repository.jboss.org/nexus/content/repositories/snapshots/'
            }
            else {
                url 'https://repository.jboss.org/nexus/service/local/staging/deploy/maven2/'
            }
            credentials {
                username = JBOSS_REPO_USER
                password = JBOSS_REPO_PASS
            }
        }
    }
}

wrapper {
    // To upgrade the version of gradle used in the wrapper, run:
    //     ./gradlew wrapper --gradle-version NEW_VERSION
    distributionType = Wrapper.DistributionType.ALL
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}
